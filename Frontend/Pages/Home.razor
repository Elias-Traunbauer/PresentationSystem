@page "/"
@using Frontend.Models
@inject HttpClient Http

<PageTitle>Home</PageTitle>

<h1>Presentation Overview</h1>

@code{
    public IEnumerable<Presentation>? Presentations = null;
    public bool Loading = true;
    public DateOnly SelectedDate = DateOnly.FromDateTime(DateTime.Now);
    public DateOnly SelectedMonth = new DateOnly(DateTime.Now.Year, DateTime.Now.Month, 1);
    public int DaysFromPreviousMonthDisplayed {
        get
        {
            // takes the day cnt of the selected month, 
            // Math.Floor((35 - selectedmonthdaycnt) / 2)
            int daysInMonth = DateTime.DaysInMonth(SelectedMonth.Year, SelectedMonth.Month);
            return (int)Math.Floor((35 - daysInMonth) / 2f);
        }
    }

    public void PreviousMonth()
    {
        SelectedMonth = SelectedMonth.AddMonths(-1);
        StateHasChanged();
    }

    public void NextMonth()
    {
        SelectedMonth = SelectedMonth.AddMonths(1);
        StateHasChanged();
    }
}
<div class="container">
    <div>
@{
    if (Presentations == null && Loading)
    {
        <p><em>Loading...</em></p>
    }
    else if (Presentations != null)
    { // calendar view
        <button @onclick="PreviousMonth">Previous Month</button>
        <h2>@SelectedMonth.ToString("MMMM yyyy")</h2>
        <button @onclick="NextMonth">Next Month</button>
        DateOnly current = new DateOnly(SelectedMonth.Year, SelectedMonth.Month, 1).AddDays(-DaysFromPreviousMonthDisplayed);
        for (int i = 0; i < 35; i++)
        {
            <p class="@(current.Month != SelectedMonth.Month ? "calendar__day--disabled" : "")">@current.Day</p>
            current = current.AddDays(1);
        }

    }
    else
    {
        <p><em>Loading encountered an error</em></p>
    }
        }
    </div>
    <div>
        <h2>Details</h2>
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        this.Presentations = await Http.GetFromJsonAsync<IEnumerable<Presentation>>("api/presentation");
        Loading = false;
    }
}