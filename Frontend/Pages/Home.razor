@page "/"
@using Frontend.Models
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Presentation Overview</h1>

@code {
    public IEnumerable<Presentation>? Presentations = null;
    public bool Loading = true;
    public DateOnly SelectedDate = DateOnly.FromDateTime(DateTime.Now);
    public List<Presentation>? SelectedPresentations
    {
        get
        {
            if (Presentations == null)
            {
                return null;
            }
            var presentations = Presentations.Where(x => new DateOnly(x.FromDate.Year, x.FromDate.Month, x.FromDate.Day) == SelectedDate).ToList();
            return presentations.Count > 0 ? presentations : null;
        }
    }
    public HashSet<DateOnly> PresentationDates
    {
        get
        {
            if (Presentations == null)
            {
                return new HashSet<DateOnly>();
            }
            return new HashSet<DateOnly>(Presentations.Select(x => new DateOnly(x.FromDate.Year, x.FromDate.Month, x.FromDate.Day)));
        }
    }
    private int _selectedYear = DateTime.Now.Year;
    public int SelectedYear
    {
        get => _selectedYear;
        set
        {
            _selectedYear = value;
            StateHasChanged();
        }

    }
    private int _selectedMonth = DateTime.Now.Month;
    public int SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            _selectedMonth = value;
            StateHasChanged();
        }
    }
    public int DaysFromPreviousMonthDisplayed
    {
        get
        {
            // takes the day cnt of the selected month,
            // Math.Floor((35 - selectedmonthdaycnt) / 2)
            int daysInMonth = DateTime.DaysInMonth(SelectedYear, SelectedMonth);
            return (int)Math.Floor(((7 * 5) - daysInMonth) / 2f);
        }
    }

    public void PreviousMonth()
    {
        SelectedMonth--;
        if (SelectedMonth < 1)
        {
            SelectedMonth = 12;
            SelectedYear--;
        }
        StateHasChanged();
    }

    public void NextMonth()
    {
        SelectedMonth++;
        if (SelectedMonth > 12)
        {
            SelectedMonth = 1;
            SelectedYear++;
        }
        StateHasChanged();
    }
    public void SelectDate(DateOnly date)
    {
        SelectedDate = date;
        StateHasChanged();
    }
    public void SkipToNextPresentation()
    {
        if (Presentations == null)
        {
            return;
        }
        var nextPresentation = Presentations.Where(x => new DateOnly(x.FromDate.Year, x.FromDate.Month, x.FromDate.Day) > SelectedDate).OrderBy(x => x.FromDate).FirstOrDefault();
        if (nextPresentation != null)
        {
            SelectedDate = new DateOnly(nextPresentation.FromDate.Year, nextPresentation.FromDate.Month, nextPresentation.FromDate.Day);
SelectedYear = nextPresentation.FromDate.Year;
            SelectedMonth = nextPresentation.FromDate.Month;
        }
        StateHasChanged();
    }
    public void SkipToLastPresentation() {
        if (Presentations == null)
        {
            return;
        }
        var lastPresentation = Presentations.Where(x => new DateOnly(x.FromDate.Year, x.FromDate.Month, x.FromDate.Day) < SelectedDate).OrderBy(x => x.FromDate).LastOrDefault();
        if (lastPresentation != null)
        {
            SelectedDate = new DateOnly(lastPresentation.FromDate.Year, lastPresentation.FromDate.Month, lastPresentation.FromDate.Day);
            SelectedYear = lastPresentation.FromDate.Year;
            SelectedMonth = lastPresentation.FromDate.Month;
        }
        StateHasChanged();
     }
}
<div class="container">
    <div class="calandar_container">
        @{
            if (Presentations == null && Loading)
            {
                <p><em>Loading...</em></p>
            }
            else if (Presentations != null)
            { // calendar view
                <div>
                    <button class="month_button" @onclick="SkipToLastPresentation">@("<<")</button>
                <button class="month_button" @onclick="PreviousMonth">@("<")</button>
                <input type="number" min="1" max="12" @bind-value="@SelectedMonth" />
                <input type="number" min="1900" max="2100" @bind-value="@SelectedYear" />
                <button class="month_button" @onclick="NextMonth">></button>
                    <button class="month_button" @onclick="SkipToNextPresentation">>></button>
                </div>
                // find nearest monday to the 1st
                var firstOfMonthDay = new DateOnly(SelectedYear, SelectedMonth, 1).DayOfWeek;
                int DaysFromPreviousMonthDisplayed = 0;
                switch (firstOfMonthDay)
                {
                    case DayOfWeek.Monday:
                        DaysFromPreviousMonthDisplayed = 0;
                        break;
                    case DayOfWeek.Tuesday:
                        DaysFromPreviousMonthDisplayed = 1;
                        break;
                    case DayOfWeek.Wednesday:
                        DaysFromPreviousMonthDisplayed = 2;
                        break;
                    case DayOfWeek.Thursday:
                        DaysFromPreviousMonthDisplayed = 3;
                        break;
                    case DayOfWeek.Friday:
                        DaysFromPreviousMonthDisplayed = 3;
                        break;
                    case DayOfWeek.Saturday:
                        DaysFromPreviousMonthDisplayed = 3;
                        break;
                    case DayOfWeek.Sunday:
                        DaysFromPreviousMonthDisplayed = 3;
                        break;
                }

                DateOnly current = new DateOnly(SelectedYear, SelectedMonth, 1).AddDays(-DaysFromPreviousMonthDisplayed);
                <div class="calendar-grid">
                    @for (int d = 0; d < 7; d++) {
                        DateOnly day = current.AddDays(d);
                        <div style="font-size: 1em; padding: 0.4em 0 0.4em 0">@day.DayOfWeek.ToString().Substring(0, 3)</div>
                    }
                    @for (int i = 0; i < 35; i++)
                    {
                        DateOnly copiedDate = current;
                        <div @onclick="() => SelectDate(copiedDate)" class="calendar_item @(current.Month != SelectedMonth ? "disabled" : "") 
                        @((DateTime.Now.Year == SelectedYear && DateTime.Now.Month == SelectedMonth && current.Day == DateTime.Now.Day) ? "today" : "") 
                        @((SelectedDate == current) ? "selected" : "")
                        @((PresentationDates.Contains(current)) ? "presentation_day" : "")">
                        @current.Day
                        </div>
                        current = current.AddDays(1);
                    }
                </div>
                <div class="legend">
                    <span>
                        <span class="todayText">■</span><span>Today</span>
                    </span>
                    <span>
                        <span class="selected">■</span><span>Selected day</span>
                    </span>
                    <span>
                        <span class="presentation_dayText">■</span><span>Day with presentation</span>
                    </span>
                </div>
            }
            else
            {
                <p><em>Loading encountered an error</em></p>
            }
        }
    </div>
    <span class="vertical_line"></span>
    <div>
        <h2>Presentations</h2>
        <p class="header">Selected date</p>
        <h3>@SelectedDate.ToString("dd MMMM yyyy")</h3>

        @{
            if (SelectedPresentations != null)
            {
                <div class="presentation_cards">
                @foreach (var item in SelectedPresentations)
                {
                    <div class="presentation_card">
                        <p class="header">Name</p>
                        <h4>@item.Name</h4>
                        <p class="header">Location</p>
                        <span>@item.Location</span>
                        <p class="header">Start</p>
                        <span>@item.FromDate</span>
                        <p class="header">End</p>
                        <span>@item.ToDate</span>
                    </div>
                }
                </div>
            }
            else
            {
                <h5>Nothing to display yet :/</h5>
                
            }
            <button class="newPresentation" @onclick="() => NavigateToNewPresentation(SelectedDate)">New +</button>
        }
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("date", out var fromDateValues))
        {
            SelectedDate = DateOnly.Parse(fromDateValues.FirstOrDefault()!);
        }
        // clear query parameters with navigation
        NavigationManager.NavigateTo(NavigationManager.Uri.Split('?')[0]);

        this.Presentations = await Http.GetFromJsonAsync<IEnumerable<Presentation>>("api/presentation");
        Loading = false;
    }

    public void NavigateToNewPresentation(DateOnly? date = null)
    {
        if (date != null)
        {
            NavigationManager.NavigateTo("/newPresentation?fromDate=" + date!.Value.ToString("o"));
        }else {
            NavigationManager.NavigateTo("/newPresentation");
        }
    }
}